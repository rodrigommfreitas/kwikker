generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    description   String?
    location      String?
    following     Follows[] @relation(name: "follower")
    followers     Follows[] @relation(name: "following")

    kweeks        Kweek[] 
    likes         Like[]
    rekweeks      Rekweek[]
    replies       Reply[]

    createdAt     DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Follows {
    followerId String
    followingId String 
    follower User  @relation("follower", fields: [followerId], references: [id], onDelete: Cascade) 
    following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

    @@id([followerId, followingId])
    @@index([followingId])
    @@index([followerId])
}

model Kweek {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
    authorId  String
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    replies   Reply[]
    likes    Like[]
    rekweeks Rekweek[]
    
    @@index([authorId])
}

model Like {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    kweekId    String
    kweek      Kweek   @relation(fields: [kweekId], references: [id], onDelete: Cascade)
    likerId  String
    liker    User      @relation(fields: [likerId], references: [id], onDelete: Cascade)

    @@index([kweekId])
    @@index([likerId])
}

model Rekweek {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    kweekId    String
    kweek      Kweek     @relation(fields: [kweekId], references: [id], onDelete: Cascade)
    rekweekerId  String
    rekweeker    User    @relation(fields: [rekweekerId], references: [id], onDelete: Cascade)

    @@index([kweekId])
    @@index([rekweekerId])
}

model Reply {
    id        String        @id @default(cuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    content   String
    authorId  String
    author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
    kweekId    String
    kweek      Kweek        @relation(fields: [kweekId], references: [id], onDelete: Cascade)
    replyToId  String?
    replyTo      Reply?     @relation("replyToReply", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction) 
    replies   Reply[]       @relation("replyToReply")

    @@index([authorId])
    @@index([kweekId])
    @@index([replyToId])
}
